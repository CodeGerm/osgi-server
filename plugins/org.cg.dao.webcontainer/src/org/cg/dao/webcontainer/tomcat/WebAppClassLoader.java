/** *  * Copyright CodeGerm. All Rights Reserved. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *  */package org.cg.dao.webcontainer.tomcat;import java.io.IOException;import java.net.URL;import java.net.URLClassLoader;import java.util.Enumeration;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;public class WebAppClassLoader extends URLClassLoader {	private final static Log logger = LogFactory.getLog(WebAppClassLoader.class);	private ClassLoader myPluginLoader;	private DaoClassLoader tomcatPluginLoader;	public WebAppClassLoader(ClassLoader pluginLoader) {		super(new URL[0]);		this.myPluginLoader = pluginLoader;		this.tomcatPluginLoader = new DaoClassLoader(Activator.EXT_ID);	}	@Override	protected Class<?> findClass(String name) throws ClassNotFoundException {		return super.findClass(name);	}	@Override	public URL findResource(String resource) {		logger.debug("finding resource " + resource);		URL url = myPluginLoader.getResource(resource);		if (url != null)			return url;		url = tomcatPluginLoader.getResource(resource);		if (url != null)			return url;		return super.findResource(resource);	}	@Override	public Enumeration<URL> findResources(String resources) throws IOException {		logger.debug("finding resources " + resources);		Enumeration<URL> urls = myPluginLoader.getResources(resources);		if (urls != null && urls.hasMoreElements())			return urls;		urls = tomcatPluginLoader.getResources(resources);		if (urls != null && urls.hasMoreElements())			return urls;		return super.findResources(resources);	}	@Override	public URL getResource(String resName) {		logger.debug("getting resource: " + resName);		URL url = myPluginLoader.getResource(resName);		if (url == null) {			return tomcatPluginLoader.getResource(resName);		}		return url;	}	@Override	public Enumeration<URL> getResources(String name) throws IOException {		logger.debug("get resources " + name);		Enumeration<URL> urls = myPluginLoader.getResources(name);		if (urls == null) {			return tomcatPluginLoader.getResources(name);		}		return urls;	}	public URL[] getURLs() {		URL[] pluginLoaderURLs;		if (myPluginLoader instanceof URLClassLoader)			pluginLoaderURLs = ((URLClassLoader) myPluginLoader).getURLs();		else			pluginLoaderURLs = new URL[0];		URL[] tomcatPluginLoaderURLs = tomcatPluginLoader.getURLs();		URL[] urls = new URL[pluginLoaderURLs.length + tomcatPluginLoaderURLs.length];		System.arraycopy(pluginLoaderURLs, 0, urls, 0, pluginLoaderURLs.length);		System.arraycopy(tomcatPluginLoaderURLs, 0, urls, pluginLoaderURLs.length, tomcatPluginLoaderURLs.length);		return urls;	}	@SuppressWarnings({ "rawtypes", "unchecked" })	public Class loadClass(String className) throws ClassNotFoundException {		Class myClass = null;		try {			myClass = tomcatPluginLoader.loadClass(className);		} catch (ClassNotFoundException e) {			myClass = myPluginLoader.loadClass(className);		} finally {		}		return myClass;	}}